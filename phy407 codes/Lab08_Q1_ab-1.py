# -*- coding: utf-8 -*-
"""
Created on Thu Oct 29 21:48:05 2020

@author: yonat
"""

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm
import matplotlib as mpl
import time

# in this code we will be using the gauss-seide method to find the potential at 
# each grid point and then make a contour plot of the potential.
# we did this without overrelaxation and we with 
# overrelaxation with omega values 0.1 and 0.5. we will also plot the electric field lines that the two capacitors generate.

figure,(a1)=plt.subplots(nrows=1,ncols=1)
figure,(a)=plt.subplots(nrows=1,ncols=1)
figure,(b)=plt.subplots(nrows=1,ncols=1)
figure3,(c)=plt.subplots(nrows=1,ncols=1)
figure3.subplots_adjust(bottom=0.84)
figure4,(d)=plt.subplots(nrows=1,ncols=1)
figure5,(e)=plt.subplots(nrows=1,ncols=1)
figure5.subplots_adjust(bottom=0.84)
# Constants
M = 100         # Grid squares on a side
V = 1.0         # Voltage at capacitors
target = 1e-6   # Target accuracy

def Gauss_Seide(w,phi,updated_phi):
    start = time.time()
    iterations=0
    delta=1
    while delta>target:
        delta=0
# Calculate new values of the potential
        for i in range(1, M): # all x values except the first and last
            for j in range(1, M): # all y values except the first and last               
                updated_phi[i,j]=np.copy(phi[i,j])
                phi[i, j] = (phi[i+1, j] + phi[i-1, j]
                    + phi[i, j+1] + phi[i, j-1])*(1+w)/4-w*phi[i,j]
        phi[2*M//10:8*M//10,2*M//10] = V  #capacitor potential stays fixed
        phi[2*M//10:8*M//10,8*M//10] = -V #capacitor potential stays fixed
        delta=np.max(abs(np.copy(phi)-updated_phi))       
        iterations+=1
    z=time.time() - start
    print('omega = ',w,':',z,'seconds, ',iterations,' iterations ')

def Gauss_Seide_no_relax(phi,updated_phi):
    start = time.time()
    iterations=0
    delta=1
    while delta>target:
        delta=0
# Calculate new values of the potential
        for i in range(1, M): # all x values except the first and last
            for j in range(1, M): # all y values except the first and last                
                updated_phi[i,j]=np.copy(phi[i,j])
                phi[i, j] = (phi[i+1, j] + phi[i-1, j]
                    + phi[i, j+1] + phi[i, j-1])/4
        phi[2*M//10:8*M//10,2*M//10] = V #capacitor potential stays fixed
        phi[2*M//10:8*M//10,8*M//10] = -V #capacitor potential stays fixed 
        delta=np.max(abs(np.copy(phi)-updated_phi))       
        iterations+=1
    z=time.time() - start
    print('no overrelaxation:',z,'seconds, ',iterations,' iterations')

#%%
# first lets plot the none-relaxation Gauss-Seide method:
phi = np.zeros([M+1,M+1],float)
phi[2*M//10:8*M//10,2*M//10] = V  #capacitor potential
phi[2*M//10:8*M//10,8*M//10] = -V  #capacitor potential
updated_phi = np.zeros([M+1,M+1],float) # ill use this matrix to hold the updated phi in the Gauss seide method

Gauss_Seide_no_relax(phi,updated_phi)
a1.imshow(phi,cmap=cm.winter)
a1.set_xlabel('x($mm$)')
a1.set_ylabel('y($mm$)')
a1.set_title(' Gauss-Seide without overrelaxation')
#%%

# overrelaxation for omega=0.5:
phi = np.zeros([M+1,M+1],float)
phi[2*M//10:8*M//10,2*M//10] = V  #capacitor potential
phi[2*M//10:8*M//10,8*M//10] = -V  #capacitor potential
updated_phi = np.zeros([M+1,M+1],float) # ill use this matrix to hold the updated phi in the Gauss seide method

w=0.5  #OMEGA VALUE
Gauss_Seide(w,phi,updated_phi) # overrelaxation method with omega= 0.5
a.imshow(phi,cmap=cm.winter)
a.set_xlabel('x($mm$)')
a.set_ylabel('y($mm$)')
a.set_title('overrelaxation Gauss-Seide with omega = 0.5')

#%%
# doing overrelaxation again for omega=0.1:
phi = np.zeros([M+1,M+1],float)
phi[2*M//10:8*M//10,2*M//10] = V  #capacitor potential
phi[2*M//10:8*M//10,8*M//10] = -V  #capacitor potential
updated_phi = np.zeros([M+1,M+1],float)

w=0.1  #OMEGA VALUE   
Gauss_Seide(w,phi,updated_phi) # overrelaxation method with omega= 0.1
b.imshow(phi,cmap=cm.winter)
b.set_xlabel('x($mm$)')
b.set_ylabel('y ($mm$)')
b.set_title('overrelaxation Gauss-Seide with omega = 0.1')


cmap = mpl.cm.winter
norm = mpl.colors.Normalize(vmin=-1, vmax=1)
cb1 = mpl.colorbar.ColorbarBase(c,cmap=cmap,norm=norm, orientation='horizontal')
cb1.set_label('Potential $V$')

#%%
# now we will plot the Electric field lines generated by the two capacitors:

x = np.linspace(-0,10, 100)
y = np.linspace(-0,10, 100)

X, Y = np.meshgrid(x, y)
def V(n): #voltage of 2*n particles from the origin
    z=(X+Y)*0
    for i in n:
        z+=1/((X-2)**2 + (Y-i)**2)**.5-1/((X-8)**2 + (Y-i)**2)**.5
    return z
n=np.linspace(2,8,100) #range of y values of the capacitors positions
V=V(n)

Ey, Ex = np.gradient(-V, y, x) #Electric field inthe x and y directions
d.streamplot(X, Y, Ex, Ey, color=V, linewidth=1, cmap='autumn')

d.set_title('Electric field lines')
d.set_xlabel('x($cm$)')
d.set_ylabel('y($cm$)')

cmap = mpl.cm.autumn
norm = mpl.colors.Normalize(vmin=-1, vmax=1)
cb1 = mpl.colorbar.ColorbarBase(e, cmap=cmap,norm=norm, orientation='horizontal')
cb1.set_label('Potential ($V$)')



